@import "helpers/map-helpers";
@import "helpers/deep-map-merge";

$custom-box-element-separator: "__" !default;
$custom-box-type: null;

@import "custom-box/theme";
@import "custom-box/functions";

@mixin set-custom-box-theme($theme) {
    @if type-of($theme) != 'map' {
        @error "$theme for the 'set-custom-box-theme' mixin must be of type 'map', '#{type-of($theme)}' given";
    }
    $custom-box-theme: $theme !global;
}

@mixin set-custom-box-checkbox-theme($theme) {
    @if type-of($theme) != 'map' {
        @error "$theme for the 'set-custom-box-checkbox-theme' mixin must be of type 'map', '#{type-of($theme)}' given";
    }
    $custom-box-checkbox-theme: $theme !global;
}

@mixin set-custom-box-radiobox-theme($theme) {
    @if type-of($theme) != 'map' {
        @error "$theme for the 'set-custom-box-radiobox-theme' mixin must be of type 'map', '#{type-of($theme)}' given";
    }
    $custom-box-radiobox-theme: $theme !global;
}

@mixin throw-error-if-not-nested($value, $mixin) {
    @if $value == null {
        @error "Usage of the '#{$mixin}' mixin must be nested inside the 'custom-box' mixin";
    }
}

@mixin custom-box($block, $type: checkbox) {
    $custom-box-type: $type !global;

    .#{$block} {
        box-sizing: border-box;
        position: relative;

        @content;
    }
}

@mixin custom-box-input($element: input) {
    @include throw-error-if-not-nested(&, custom-box-input);

    @at-root {
        #{&}#{$custom-box-element-separator + $element} {
            opacity: 0;
            position: absolute;

            @content;
        }
    }
}

@mixin custom-box-label($element: label) {
    @include throw-error-if-not-nested(&, custom-box-label);

    @at-root {
        #{&}#{$custom-box-element-separator + $element} {
            box-sizing: border-box;
            display: inline-flex;
            line-height: get-custom-box-property('container.height');
            position: relative;

            &:before {
                background-color: get-custom-box-property('container.background-color');
                border: get-custom-box-property('container.border');
                border-radius: get-custom-box-property('container.border-radius');
                box-sizing: border-box;
                content: '';
                display: block;
                flex: 0 0 auto;
                height: get-custom-box-property('container.height');
                margin: get-custom-box-property('container.margin');
                transition: get-custom-box-property('container.transition');
                width: get-custom-box-property('container.width');
            }

            &:after {
                box-sizing: border-box;
                content: '';
                left: get-custom-box-property('tick.left');
                opacity: 0;
                position: absolute;
                top: get-custom-box-property('tick.top');
                transform: scale(.5);
                transition: get-custom-box-property('container.transition');
                visibility: hidden;

                @if $custom-box-type == checkbox {
                    border-bottom: get-custom-box-property('tick.border-width') solid get-custom-box-property('tick.background-color');
                    border-right: get-custom-box-property('tick.border-width') solid get-custom-box-property('tick.background-color');
                    height: get-custom-box-property('tick.height');
                    transform: scale(.5) rotate(40deg);
                    transform-origin: bottom right;
                    width: get-custom-box-property('tick.width');
                }

                @if $custom-box-type == radiobox {
                    background-color: get-custom-box-property('tick.background-color');
                    border-radius: get-custom-box-property('tick.border-radius');
                    height: get-custom-box-property('tick.height');
                    width: get-custom-box-property('tick.width');
                }
            }

            @content;
        }
    }

    @at-root {
        $input: 'input[type="checkbox"]';
        $transform: scale(1) rotate(40deg);

        @if $custom-box-type == radiobox {
            $input: 'input[type="radio"]';
            $transform: scale(1);
        }

        #{&} > #{$input}:checked + #{&}#{$custom-box-element-separator + $element} {
            &:before {
                background-color: get-custom-box-property('container._checked.background-color');
                border: get-custom-box-property('container._checked.border');
            }

            &:after {
                opacity: 1;
                transform: $transform;
                visibility: visible;
            }
        }

        #{&} > #{$input}:focus + #{&}#{$custom-box-element-separator + $element} {
            &:before {
                box-shadow: get-custom-box-property('container._focus.box-shadow');
            }
        }
    }
}
